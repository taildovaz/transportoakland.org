- group: name={{ user }} state=present

- ansible.builtin.user:
    name: "{{ user }}"
    group: "{{ user }}"
    groups: "{{ user }}"
    append: yes

- ansible.builtin.user:
    name:  php
    group: "{{ user }}"
    append: yes

- file: path={{ directory }}/public
        state=directory
        mode=0755
        group={{ user }}
  become: yes
  become_user: "{{ user }}"

- name: "clone Wordpress version {{ wordpress_version }}"
  git: repo={{ wordpress_url }}
       dest={{ directory }}/wordpress
       version={{ wordpress_version }}
       update=yes
  become: yes
  become_user: "{{ user }}"

- name: Copy Wordpress files into the public folder
  command: 'rsync --archive --filter="- .git/" --filter="+ *" {{ directory }}/wordpress/ {{ directory }}/public'

- name: render wp-config.php into place
  template: src=wp-config.php
            dest={{ directory }}/public/wp-config.php
            owner={{ user }}
            group={{ user }}

- name: Install mysql python
  ansible.builtin.command: pip install pymysql

- name: create mysql user {{ database_user }}
  community.mysql.mysql_user:
    name: "{{ database_user }}"
    password: "{{ database_password }}"
    priv: "{{ database_name }}.*:ALL,GRANT"
    state: present
    host: "{{ database_host }}"
    login_user: root
    login_host: "{{ database_host }}"
    login_unix_socket: /run/mysqld/mysqld.sock

- name: ensure {{ database_name }} is present
  mysql_db: name={{ database_name }}
            state=present
            login_host={{ database_host }}
            login_password={{ database_password }}
            login_user={{ database_user }}

- file: path={{ directory }}/tmp
        state=directory
        mode=0755
        group={{ user }}
  become: yes
  become_user: "{{ user }}"

# 775 so that PHP can write to this directory
- file: path={{ directory }}/public/wp-uploads/tmp
        state=directory
        mode=0775
        group={{ user }}
  become: yes
  become_user: "{{ user }}"

- name: Get the akismet plugin
  get_url: url={{ akismet_url }}
           dest={{ directory }}/tmp/akismet-{{ akismet_version }}.zip
  become: yes
  become_user: "{{ user }}"

- name: Install akismet
  ansible.builtin.unarchive:
    src={{ directory }}/tmp/akismet-{{ akismet_version }}.zip
    dest={{ directory }}/public/wp-content/plugins
    copy=no
  become: yes
  become_user: "{{ user }}"

- name: Get the progress bar plugin
  get_url: url={{ progress_bar_url }}
           dest={{ directory }}/tmp/progress-bar-{{ progress_bar_version }}.zip
  become: yes
  become_user: "{{ user }}"

- name: Install the progress bar plugin
  ansible.builtin.unarchive:
    src={{ directory }}/tmp/progress-bar-{{ progress_bar_version }}.zip
    dest={{ directory }}/public/wp-content/plugins
    copy=no
  become: yes
  become_user: "{{ user }}"

- name: Get the wordpress importer plugin
  ansible.builtin.get_url:
    url:  "{{ wordpress_importer_url }}"
    dest: "{{ directory }}/tmp/wordpress-importer-{{ wordpress_importer_version }}.zip"
  become: yes
  become_user: "{{ user }}"

- name: Unzip wordpress importer
  ansible.builtin.unarchive:
    src: "{{ directory }}/tmp/wordpress-importer-{{ wordpress_importer_version }}.zip"
    dest: "{{ directory }}/tmp"
    copy: no
  become: yes
  become_user: "{{ user }}"

- name: copy wordpress importer
  ansible.builtin.copy:
    # "wordpress-importer-master" is the name of the repo that gets unzipped in
    # step above.
    #
    # the trailing slash means "don't copy to wordpress-importer/src"
    src: "{{ directory }}/tmp/wordpress-importer-master/src/"
    dest: "{{ directory }}/public/wp-content/plugins/wordpress-importer"
    owner: "{{ user }}"
    group: "{{ user }}"
    remote_src: true
  become: yes
  become_user: "{{ user }}"

- name: download wordpress commandline tool
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
    dest: /home/php/bin/wp
    mode: 0755
  become: yes
  become_user: php

- name: render wordpress nginx template
  template: src=nginx.conf
            dest={{ nginx_include_dir }}/{{ domain }}.conf
            owner=nginx
            group=nginx
  notify: reload nginx
